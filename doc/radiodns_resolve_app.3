'\" -*- coding: us-ascii -*-
.if \n(.g .ds T< \\FC
.if \n(.g .ds T> \\F[\n[.fam]]
.de URL
\\$2 \(la\\$1\(ra\\$3
..
.if \n(.g .mso www.tmac
.TH radiodns_resolve_app 3 "4 September 2010" "" ""
.SH NAME
radiodns_resolve_app \- Perform application discovery against a target domain
.SH SYNOPSIS
'nh
.nf
\*(T<#include <radiodns.h>, \-lradiodns\*(T>
.fi
.sp 1
.PP
.fi
.ad l
\*(T<radiodns_app_t *\fBradiodns_resolve_app\fR\*(T> \kx
.if (\nx>(\n(.l/2)) .nr x (\n(.l/5)
'in \n(.iu+\nxu
\*(T<(radiodns_context_t *\fIcontext\fR, const char *\fIname\fR, const char *\fIprotocol\fR);\*(T>
'in \n(.iu-\nxu
.ad b
'hy
.SH DESCRIPTION
\*(T<\fBradiodns_resolve_app\fR\*(T> performs application discovery
against a target domain associated with a RadioDNS context. It does
this by querying DNS for records which take the following form:
.PP
_<\*(T<name\*(T>>._<\*(T<protocol\*(T>>.<target>
.PP
Where <target> is the target domain name associated with the
context. \*(T<\fBradiodns_resolve_app\fR\*(T> automatically
invokes \*(T<\fBradiodns_resolve_target\fR\*(T> if the context
currently has no target domain name associated with it.
.PP
\*(T<\fBradiodns_resolve_app\fR\*(T> is able to resolve two
distinct kinds of application advertisment both described below. Both
kinds of advertisement can co-exist for a given application domain
name.
.PP
Anonymous advertisements are those where SRV
(and optionally TXT) records are directly
associated with the application domain name itself. For example,
given a target domain name of "apps.example.org", a
\*(T<name\*(T> of "radiovis" and a
\*(T<protocol\*(T> of "tcp", the following record
might be published in DNS:
.PP
_radiovis._tcp.apps.example.org. IN SRV 0 100 61613 vis.example.org.
.PP
This record constitutes an anonymous advertisment consisting of a
single service record and no parameters. The
\*(T<name\*(T> member of the returned
\*(T<radiodns_app_t\*(T> structure relating to this 
application instance will be NULL. 
.PP
Named instances, on the other hand, use PTR
records in order to advertise multiple, distinct, named instances
of an application. For example, the following records might be
published:
.PP
_radiovis._tcp.apps.example.org. IN PTR Test\e032RadioVIS\e032Service._radiovis._tcp.apps.example.org.
.PP
Test\e032RadioVIS\e032Service._radiovis._tcp.apps.example.org. SRV 0 100 61613 vis.example.org.
.PP
This advertisment constitutes a named advertisment for an application
instance named "Test RadioVIS Service". In the returned
\*(T<radiodns_app_t\*(T> structure relating to this
application instance, the \*(T<name\*(T> member
will contain the value "Test RadioVIS Service".
.PP
\*(T<\fBradiodns_resolve_app\fR\*(T> may return a chain of
\*(T<radiodns_app_t\*(T> structures, linked by way of
the \*(T<next\*(T> member (with the last entry in
the chain having this member set to NULL). Each
entry in the chain relates to a single discovered application
instance. If an anonymous instance was discovered, it will always
be returned as the first entry in the chain.
.SH "MULTIPLE SERVICE RECORDS"
Within each \*(T<radiodns_app_t\*(T> structure, there
is a member named \*(T<srv\*(T> which is an array of
\*(T<radiodns_srv_t\*(T> structures, each one
pertaining to a discovered SRV record associated
with the application instance.
.PP
The number of SRV records discovered, and so
the number of entries in the \*(T<srv\*(T> array,
is stored in the \*(T<nsrv\*(T> member of the
\*(T<radiodns_app_t\*(T> structure.
.SH "APPLICATION PARAMETERS"
Alongside SRV records, applications may
advertise parameters through the use of TXT
records. Such TXT records have the form:
.PP
"key=value key=value key=value ..."
.PP
Each "key" and "value" are percent-encoded (as per URL parameters),
and one or more spaces separate each pair. Parsing of a
TXT record is halted when text is encountered
which does not match this structure.
.PP
Each key and value pair is stored as a
\*(T<radiodns_kv_t\*(T> structure, which is itself
a member of the \*(T<params\*(T> array within the
\*(T<radiodns_app_t\*(T> structure. The number of
parameters stored (if any) is stored in the
\*(T<nparams\*(T> member of the
\*(T<radiodns_app_t\*(T> structure.
.PP
Parameter names and values are automatically percent-decoded before
storage. The use of parameters is entirely application-defined. Some
applications may use no parameters at all, while others may require
their presence to function correctly.
.SH "RETURN VALUE"
If application instances are discovered, a pointer to the first
entry in a chain of \*(T<radiodns_app_t\*(T>
structures is returned. When none of the entries in the chain are
required, the head entry should be passed to
\*(T<\fBradiodns_destroy_app\fR\*(T> in order to release
resources associated with the chain.
.PP
If no application instances are discovered, but otherwise no
errors occur, NULL is returned, and both
\*(T<h_errno\*(T> and \*(T<errno\*(T> are
set to zero.
.PP
In the event of a catastrophic error, such as a memory allocation
failure, NULL is returned and both
\*(T<h_errno\*(T> and \*(T<errno\*(T> are set
appropriately.
.SH CAUTION
\*(T<\fBradiodns_resolve_app\fR\*(T> performs network-based
operations, and may take several seconds (and in some cases longer)
to complete. It should never ever be invoked on a user interface
thread in a GUI application, or equivalent.
.SH "SEE ALSO"
\fBradiodns_destroy_app\fR(3)
, 
\fBradiodns_resolve_target\fR(3)
, 
\fBradiodns_target\fR(3)
